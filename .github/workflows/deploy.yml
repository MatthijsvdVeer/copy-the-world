on:
  push:
    branches:
      - 'main'
  workflow_dispatch:
name: Deploy

env:
  DOTNET_VERSION: '6.0' 
  ARTIFACT_DIR: './artifacts'

jobs:
  deploy-infra:
    runs-on: ubuntu-latest
    outputs:
      apiDataAppName: ${{ steps.deploy.outputs.apiDataAppName }}
      simulationAppName: ${{ steps.deploy.outputs.simulationAppName }}
      functionsAppName: ${{ steps.deploy.outputs.functionsAppName }}
      patchesListenSecretUrl: ${{ steps.deploy.outputs.patchesListenSecretUrl }}
      patchesSendSecretUrl: ${{ steps.deploy.outputs.patchesSendSecretUrl }}
      ingressListenSecretUrl: ${{ steps.deploy.outputs.ingressListenSecretUrl }}
      ingressSendSecretUrl: ${{ steps.deploy.outputs.ingressSendSecretUrl }}
    steps:

    - uses: actions/checkout@v3

    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: deploy
      id: deploy
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: ${{ secrets.AZURE_RESOURCE_GROUP_NAME }}
        template: ./infra/main.bicep
        parameters: 'tenantId=${{ secrets.AZURE_TENANT_ID }} principalId=${{ secrets.AZURE_CLIENT_ID }}'
        failOnStdErr: false

  build-code:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@main
    - name: üîß Setup DotNet ${{ env.DOTNET_VERSION }} Environment
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    - name: üèóÔ∏è Build Solution
      shell: pwsh
      run: |
        mkdir ${{ env.ARTIFACT_DIR }}
        dotnet publish ./src/CopyTheWorld/CopyTheWorld.sln --configuration Release
        Compress-Archive -Path ./src/CopyTheWorld/CopyTheWorld.ApiData/bin/Release/net6.0/publish -DestinationPath ${{ env.ARTIFACT_DIR }}/CopyTheWorld.ApiData.zip
        Compress-Archive -Path ./src/CopyTheWorld/CopyTheWorld.Functions/bin/Release/net6.0/publish -DestinationPath ${{ env.ARTIFACT_DIR }}/CopyTheWorld.Functions.zip
        Compress-Archive -Path ./src/CopyTheWorld/CopyTheWorld.Simulations/bin/Release/net6.0/publish -DestinationPath ${{ env.ARTIFACT_DIR }}/CopyTheWorld.Simulations.zip
    - name: ‚¨ÜÔ∏è Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: artifacts
        path: ${{ env.ARTIFACT_DIR }}
  deploy-code:
    runs-on: ubuntu-latest
    needs: [build-code, deploy-infra]
    steps:
    - name: ‚¨áÔ∏è Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: artifacts

    - name: üîë Azure Login 
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: üöÄ Deploy ApiData Function
      shell: pwsh
      run: |
        az functionapp deploy --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_NAME }} --name ${{ needs.deploy-infra.outputs.apiDataAppName }} --src-path CopyTheWorld.ApiData.zip --type zip

    - name: üöÄ Deploy Simulations Function
      shell: pwsh
      run: |
        az functionapp deploy --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_NAME }} --name ${{ needs.deploy-infra.outputs.simulationAppName }} --src-path CopyTheWorld.Simulations.zip --type zip

    - name: üöÄ Deploy Core Functions
      shell: pwsh
      run: |
        az functionapp deploy --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_NAME }} --name ${{ needs.deploy-infra.outputs.functionsAppName }} --src-path CopyTheWorld.Functions.zip --type zip
        az functionapp config appsettings set -n ${{ needs.deploy-infra.outputs.functionsAppName }} -g ${{ secrets.AZURE_RESOURCE_GROUP_NAME }} --settings "PatchesListen=@Microsoft.KeyVault(SecretUri=${{ needs.deploy-infra.outputs.patchesListenSecretUrl }})" "PatchesSend=@Microsoft.KeyVault(SecretUri=${{ needs.deploy-infra.outputs.patchesSendSecretUrl }})" "IngressListen=@Microsoft.KeyVault(SecretUri=${{ needs.deploy-infra.outputs.ingressListenSecretUrl }})"
